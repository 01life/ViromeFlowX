/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/virome Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input                       = null
    Account                     = null
    
    // QC options
    QC_mode                     = 3
    bowtie2_index               = "/share/database/Homo_sapiens/hg38_bowtie2_index/hg38.index"
    adapters                    = "/share/app/SOP/pipeline/adapters/TruSeq3-PE.fa"


    // References Database options
    virsorter2_db                 = "/share/database/VirSorter/db/"
    crAss_db1                   = "/ehpcdata/PM/DATA/RD23010035/db/01.database/crAss-like/crAssphage_polymerase_Terminase/crAssphage_polymerase_Terminase.fa"
    crAss_db2                   = "/ehpcdata/PM/DATA/RD23010035/db/01.database/crAss-like/NC_024711.1/NC_024711.1.fasta"
    
    demovir_db                  = "/share/database/Demovir/uniprot_trembl.viral.udb"

    genome_db                   = "/ehpcdata/PM/DATA/RD23010035/db/01.database/refseq_genome/refseq_virus_filter.fasta"
    pfam_db                     = "/ehpcdata/PM/DATA/RD23010035/db/01.database/pfam/virus.pfam"
    protein_db1                 = "/ehpcdata/PM/DATA/RD23010035/db/01.database/refseq_protein/virus.pep.filter.fasta"
    protein_db2                 = "/ehpcdata/PM/DATA/RD23010035/db/Pipeline/01.database/refseq_protein/protID2taxid.txt"

    CAZy                        = "/share/database/humann/v201901/full_mapping/map_CAZy_uniref90.txt.gz"
    eggnog                      = "/share/database/humann/v201901/full_mapping/map_eggnog_uniref90.txt.gz"
    go                          = "/share/database/humann/v201901/full_mapping/map_go_uniref90.txt.gz"
    ko                          = "/share/database/humann/v201901/full_mapping/map_ko_uniref90.txt.gz"
    level4ec                    = "/share/database/humann/v201901/full_mapping/map_level4ec_uniref90.txt.gz"
    pfam                        = "/share/database/humann/v201901/full_mapping/map_pfam_uniref90.txt.gz"


    //Data directory options
    genome_data                = "/ehpcdata/PM/DATA/RD23010035/db/01.database/taxdump"
    pfam_data                  = "/share/database/Pfam"
    uniref90_data              = "/share/database/humann/v201901/uniprot/uniref_annotated/uniref90/uniref90_201901.dmnd"


    // Boilerplate options
    outdir                     = null
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'


    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null


    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '64.GB'
    max_cpus                   = 32
    max_time                   = '72.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
//try {
//    includeConfig "${params.custom_config_base}/nfcore_custom.config"
//} catch (Exception e) {
//    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
//}

// Load nf-core/virome custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/virome.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/virome profiles: ${params.custom_config_base}/pipeline/virome.config")
// }


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }


    slurm {
        conda.enabled          = true
        docker.enabled         = true
        process.executor       = 'slurm'
        process.queue          = 'q_32_64'
        process.errorStrategy  = 'retry'
        process.maxRetries     = 3 
        process.clusterOptions = "--account ${params.Account} -e slurm_%j.e -o slurm_%j.o"
        //process.scratch = true
    }

    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/virome'
    author          = """yangying"""
    homePage        = 'https://github.com/nf-core/virome'
    description     = """virome workflow"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
